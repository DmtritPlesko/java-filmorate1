create table if not EXISTS genres (
    genre_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name_genres VARCHAR(100) NOT NULL,
    CONSTRAINT genre_id_pk PRIMARY KEY (genre_id)
);
CREATE TABLE if not EXISTS mpa (
    mpa_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    mpa_name VARCHAR(50),
    CONSTRAINT mpa_id_pk PRIMARY KEY (mpa_id)
);

create table IF NOT EXISTS users (
    user_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50),
    age INTEGER,
    email VARCHAR(50) UNIQUE,
    login VARCHAR(50) UNIQUE,
    password VARCHAR(50),
    birthday TIMESTAMP
);

create table if not EXISTS films (
    film_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100),
    description VARCHAR(200),
    releaseDate TIMESTAMP,
    duration INTEGER,
    mpa_id INTEGER REFERENCES mpa (mpa_id),
    CONSTRAINT film_id_pk PRIMARY KEY (film_id)
);

CREATE TABLE IF NOT EXISTS filmgenres (
    film_id INTEGER NOT NULL REFERENCES films (film_id),
    genre_id INTEGER not null REFERENCES genres (genre_id) ,
     CONSTRAINT film_genres_pk PRIMARY KEY (film_id, genre_id),
     CONSTRAINT fk_film FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE,
     CONSTRAINT fk_genre FOREIGN KEY (genre_id) REFERENCES genres (genre_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS likes (
    film_id INTEGER not null REFERENCES films (film_id) ON DELETE CASCADE,
    user_id INTEGER not null REFERENCES users (user_id) ON DELETE CASCADE,
    CONSTRAINT likes_pk PRIMARY KEY (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS status (
    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    status_type VARCHAR(40)
);

CREATE TABLE IF NOT EXISTS friends (
    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    friend_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    status VARCHAR(40),
    CONSTRAINT id PRIMARY KEY (user_id,friend_id)
);
